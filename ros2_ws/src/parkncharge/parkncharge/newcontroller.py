#!/usr/bin/env python3

import rclpy
from rclpy.node import Node
from geometry_msgs.msg import Twist
import sys
import termios
import tty
import select
import time

class TeleopTwistKeyboard(Node):

    def __init__(self, command_sequence=None):
        super().__init__('teleop_twist_keyboard')
        self.publisher_ = self.create_publisher(Twist, '/model/vehicle_blue/cmd_vel', 10)
        self.speed = 0.5
        self.turn = 1.0
        self.move_duration = 0.5  # Duration for forward movement (in seconds)
        self.turn_duration = 17.0  # Duration for turns (in seconds)
        self.command_sequence = command_sequence if command_sequence else []  # Sequence of commands

        # Load terminal settings
        self.settings = termios.tcgetattr(sys.stdin)

        # Key bindings for movement
        self.key_bindings = {
            'i': (1, 0, 0, 0),
            'o': (1, 0, 0, -1),
            'u': (1, 0, 0, 1),
            ',': (-1, 0, 0, 0),
            '.': (-1, 0, 0, 1),
            'm': (-1, 0, 0, -1),
            'O': (1, -1, 0, 0),
            'I': (1, 0, 0, 0),
            'U': (1, 1, 0, 0),
            '<': (-1, 0, 0, 0),
            '>': (-1, -1, 0, 0),
            'M': (-1, 1, 0, 0),
            't': (0, 0, 1, 0),
            'b': (0, 0, -1, 0),
            'k': (0, 0, 0, 0),  
        }

    def run_sequence(self):
        """Run a sequence of commands automatically."""
        print("Executing command sequence...")

        for command in self.command_sequence:
            print("cmd: " + command)
            if command in self.key_bindings.keys() or command in ['j', 'l']:
                if command == 'l':
                    self.turn_90_degrees('right')
                elif command == 'j':
                    self.turn_90_degrees('left')
                else:
                    # Execute the movement command
                    x, y, z, th = self.key_bindings.get(command, (0, 0, 0, 0))
                    twist = Twist()
                    twist.linear.x = x * self.speed
                    twist.linear.y = y * self.speed
                    twist.linear.z = z * self.speed
                    twist.angular.x = 0.0
                    twist.angular.y = 0.0
                    twist.angular.z = th * self.turn
                    self.publisher_.publish(twist)

                    # Move for the duration needed
                    time.sleep(self.move_duration)

                    # Stop the robot after each movement
                    self.stop_robot()

        print("Command sequence execution complete.")

    def turn_90_degrees(self, direction):
        """Rotate the car approximately 90 degrees in place to the specified direction."""
        # Parameters for the turn
        for x in range(9):
            forward_speed = 0.2    # Slow forward speed
            turn_speed = 1.0       # Angular speed for steering
            move_duration = 3.0    # Duration to achieve approximately 90-degree turn

            if direction == 'right':
                angular_z = -abs(turn_speed)
            elif direction == 'left':
                angular_z = abs(turn_speed)
            else:
                self.get_logger().error("Invalid direction for turn_90_degrees")
                return

            # Create Twist message for turning
            twist = Twist()
            twist.linear.x = forward_speed
            twist.angular.z = angular_z

            # Start the turn
            self.publisher_.publish(twist)
            time.sleep(move_duration)

            # Stop the car after turning
            self.stop_robot()
    def stop_robot(self):
        """Send a zero velocity command to stop the robot."""
        stop_twist = Twist()
        self.publisher_.publish(stop_twist)
        time.sleep(0.1)  # Small delay to ensure the stop command is executed

    def get_instructions(self):
        """Display teleoperation instructions."""
        return """
        Reading from the keyboard and Publishing to Twist!
        -------------------------------------------------
        Moving around:
           u    i    o
           j    k    l
           m    ,    .

        j : Turn 90 degrees to the left
        l : Turn 90 degrees to the right

        t : up (+z)
        b : down (-z)
        k : stop

        q/z : increase/decrease max speeds by 10%
        w/x : increase/decrease only linear speed by 10%
        e/c : increase/decrease only angular speed by 10%

        CTRL-C to quit
        """


def main(args=None):
    # The command sequence generated by A* or any other planner
    command_sequence =  ['i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'l', 'i', 'i', 'i', 'i', 'i', 'j', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'l', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i']
    rclpy.init(args=args)
    node = TeleopTwistKeyboard(command_sequence)
    node.run_sequence()
    node.destroy_node()
    rclpy.shutdown()


if __name__ == '__main__':
    main()
